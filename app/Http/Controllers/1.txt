public function Capsomoi(Request $request)
{
    // Validate input data
    $data = $request->validate([
        'Name_Dv' => 'required'
    ]);

    // Get the member ID of the currently logged in user
    $MemberID = Auth::id();




    $member = Member::where('MemberID', $MemberID)->first();
    $thietbi = ThietBi::where('member_id', $MemberID)->first();

    if (!$member) {
        return redirect('/Capsomoi')->with('errors', 'Tài khoản không tồn tại');
    }

    if (!$thietbi) {
        return redirect('/Capsomoi')->with('errors', 'Không tìm thấy thiết bị phù hợp');
    }


    $Capso = new Capso($data);
    $Capso->member_id = $MemberID;
    $Capso->ID_Tb = $thietbi->ID_Tb;

    $random_hours = rand(4, 12);
$expired_at = date('Y-m-d H:i:s', strtotime('+' . $random_hours . ' hours'));
// $created_at = now(); // Thời điểm tạo
// $expired_at = date('Y-m-d H:i:s', strtotime($created_at . ' +4 hours')); // Thời gian hết hạn là 4 tiếng sau thời điểm tạo

$Capso->expired_at = $expired_at;
    $Capso->expired_at = $expired_at;
    $Capso->source = $thietbi->Loai_Tb;
    $Capso->MemberName =Auth::user()->MemberName;
    $Capso->ID_Tb = $thietbi->ID_Tb;

    $Capso->save();
    if (!$Capso->save()) {
        return response()->json([
            'error' => 'Lỗi trong quá trình lưu dữ liệu vào database'
        ]);
    }

    return response()->json([
        'MemberName' => Auth::user()->MemberName,
        'DvName' => $data['Name_Dv'],
        'CappedTime' => date('H:i d/m/Y'),
        'ExpiredTime' => date('H:i d/m/Y', strtotime($Capso->expired_at)),
    ]);

}












    public function dangkythanhvien(Request $r)
    {
        $validator = Validator::make($r->all(), [
            'ten' => 'required',
            'tenDN' => 'required|unique:members,UserDN',
            'matkhau' => 'required',
            'sdt' => 'required|unique:members,Tel',
            'email' => 'required|unique:members,Email',
            'diachi' => 'required',
            'vaitro' => 'required',
            'Tinhtrang' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect('/register')->withErrors($validator)->withInput();
        }
    $tt=['Ngưng hoạt động', 'Hoạt dộng',];
        $dv = ['Kế Toán', 'Lập Trình PHP ( Laravel )', 'Lập Trình backend', 'Lập Trình App Mobile'];
        $data = $r->only(['ten', 'tenDN', 'matkhau', 'sdt', 'email', 'diachi', 'vaitro','Tinhtrang']);
        $data['matkhau'] = bcrypt($data['matkhau']);
        $data['vaitro'] = $dv[$data['vaitro']];
        $data['Tinhtrang'] = $tt[$data['Tinhtrang']];
        Member::create($data);

        return view('register', ['success' => 'Nhập thành công']);
    }



















      public function Capsomoi(Request $request)
    {
        // Validate input data
        $data = $request->validate([
            'Name_Dv' => 'required',
        ]);

        // Get the member ID of the currently logged in user
        $MemberID = Auth::id();
        $member = Member::find($MemberID);
        $thietbi = ThietBi::where('member_id', $MemberID)->first();

        if (!$member) {
            return redirect('/Capsomoi')->with('errors', 'Tài khoản không tồn tại');
        }

        if (!$thietbi) {
            return redirect('/Capsomoi')->with('errors', 'Không tìm thấy thiết bị phù hợp');
        }

        $Capso = new Capso($data);
        $Capso->member_id = $MemberID;
        $Capso->ID_Tb = $thietbi->ID_Tb;
        $random_hours = rand(4, 12);
        $expired_at = now()->addHours($random_hours);
        $Capso->expired_at = $expired_at;
        $Capso->source = $thietbi->Loai_Tb;

        $currentTime = now();
        if ($currentTime > $request->expired_at) {
            $Capso->Tinhtrang = 'Bỏ qua';
        } else if ($currentTime < $request->created_at->addMinutes(15)) {
            $Capso->Tinhtrang = 'Đã sử dụng';
        } else {
            $Capso->Tinhtrang = 'Đang chờ';
        }




        $Capso->MemberName = Auth::user()->MemberName;
        $Capso->ID_Tb = $thietbi->ID_Tb;

        $Capso->save();

        $formattedCreatedAt = $Capso->created_at->format('H:i d-m-Y'); // Format the created_at field
        $formattedExpiredAt = Carbon::parse($Capso->expired_at)->format('H:i d-m-Y');
        $this->createLog('Cấp 1 số mới với số thứ tự ' . $request->STT); // Gọi phương thức createLog và truyền tham số là tên thao tác


        return response()->json([
            'STT' => $Capso->STT,
            'TGcap' => $formattedCreatedAt,
            'nameDv' => $Capso->Name_Dv,
            'TGhan' => $formattedExpiredAt,
        ]);
    }
